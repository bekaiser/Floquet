

import h5py
import numpy as np
import math as ma
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import scipy   
from scipy import signal
import functions as fn

figure_path = "./figures/"
stat_path = "./output/"
email_flag = 0
ic_plot_flag = 0
damper_scale = 100. # off if set to 0.
spur_damper = np.inf # off if np.inf
phi_path = '/home/bryan/git_repos/Floquet/figures/phi/'
psi_path = '/home/bryan/git_repos/Floquet/figures/psi/'

if email_flag == 1:
    import smtplib, ssl
    port = 465  # For SSL
    smtp_server = "smtp.gmail.com"
    sender_email = "my.sent.data.kaiser@gmail.com"  # Enter your address
    receiver_email = "my.sent.data.kaiser@gmail.com"  # Enter receiver address
    password = 'wh$0i1BTu' #input("Type your password and press enter: ")


# =============================================================================


# Re600, a100
FmultGOLDr = np.array([
0.890419937626007573783226689556613564491271972656250000000000,
0.739740917415255938571760907507268711924552917480468750000000,
0.554760297479372166407074473681859672069549560546875000000000,
0.384954520871500172063406353117898106575012207031250000000000,
0.240685707835530421361269759472634177654981613159179687500000,
0.141138385067808791450971739322994835674762725830078125000000,
0.074730790867066784755046171540016075596213340759277343750000,
0.037605062784717556423341733307097456417977809906005859375000,
0.017197626408551876936448010724234336521476507186889648437500,
0.007546137870161247380995650502200078335590660572052001953125,
0.003031738561282009986747043583932281762827187776565551757812,
0.001171577428485452015971546302353090140968561172485351562500,
0.000416394582532555936494472748066186795767862349748611450195,
0.000141174213275072340124244307801859577011782675981521606445,
0.000043583486074804802059591557483742008116678334772586822510,
0.000012182594447286719719801204031561780993797583505511283875,
0.000001073520906556842422085074235937884878921977360732853413,
0.000002368966019664470005356591772449625921126425964757800102,
0.000001073520898782663070869015410624403017436634399928152561,
0.000000409312402255217573448874525746110641932773432927206159,
0.000000113544402413273850057646551913598242933289839129429311,
0.000000023411731439741593298495836721236085242736635336768813,
0.000000006190389466268099474875912701038807584019707519473741,
0.000000001102659568938605412613325263738745657393636179222085,
0.000000000262473464677073758090743132632039098794951570425837,
0.000000000043102517219559820527816196524925249598803045358864,
0.000000000009476784295763524207746625841579932777308803437677,
0.000000000001469733622389334290539128561759709480942157067140,
0.000000000000299544362251627154581553843268661456358120664945,
0.000000000000044343936182094152746153119284216028648777999099,
0.000000000000008231218028205705922305198493821278118013945631,
0.000000000000001142872945798548938953385935744307138745882936,
0.000000000000000185448078846130823395842778613472558819222163,
-0.000000000000000156708882928945671575361380614747394447744687,
0.000000000000000111723359805730903458995095813848090962828853,
-0.000000000000000011109148363375749138614120353890539191504938,
0.000000000000000047461727453825581876988611949334594137417160,
0.000000000000000030585247668728701282070636436103693936456302,
0.000000000000000072050227603105417751896307837583261917060063,
-0.000000000000000008070867182569273130831817184166311736897866,
-0.000000000000000063700598586191869833605325611548553919797450,
-0.000000000000000031968429786217626255296350239143145216291051,
-0.000000000000000054173482422478973922092927247492653547358477,
0.000000000000000036600031145389050507629752475886290428085899,
-0.000000000000000019793184797284422506684516609906380227109300,
0.000000000000000046951730445025267342039947596496529406350325,
0.000000000000000018293380184591444801800310391768976593101683,
-0.000000000000000008992876098291629958781933907989216820785928,
0.000000000000000053259194799119305506423199582176416782331832,
0.000000000000000000732061586525235752947859557011373213303327,
0.000000000000000053822938147001046840048728910752797295096762,
0.000000000000000038471346589185596394367609727085831278534327,
-0.000000000000000028211948768628883033684658099512298786158234,
-0.000000000000000028190913582673170136850975546340477607334217,
-0.000000000000000000490797254384536302710032706589020118825542,
0.000000000000000026461426540231582805998725574342351634050367,
0.000000000000000010568243378456815393463549306969165759090098,
-0.000000000000000035504509391243471048885571732004921316369246,
0.000000000000000014408890355288088834755397329063751865012912,
0.000000000000000032487735693921254870303591703584018849299961,
-0.000000000000000027245484700405291432109854479227210120334746,
-0.000000000000000019200804700668543931712202619793265676423636,
0.000000000000000042500767269410852207975674246530098433560466,
-0.000000000000000002147728264876536376450794288589548522649074,
0.000000000000000040654722589415311725410174886397481453222827,
0.000000000000000021899928266261670145125451718448125316702527,
0.000000000000000034945950270612165428316471484065929596667164,
-0.000000000000000001272750942511104327869466358167821215687822,
-0.000000000000000032975525033929745729987948155945421390935214,
-0.000000000000000016416478147897476381797675352281561604827194,
-0.000000000000000025103694305901350817376600862523819710171612,
0.000000000000000012937751612914957295445931817510615043183477,
-0.000000000000000030623150715288876290364459341786045263193313,
-0.000000000000000026114015458577803650085545952119103340704796,
-0.000000000000000006139384843837150145342191728391674303046567,
0.000000000000000028513609564330022714557376206107331856362419,
-0.000000000000000017575798167109495715730932959556640193045889,
0.000000000000000007005325142840123523378438598414701221300794,
-0.000000000000000020546432131416973083319703594386000964192598,
0.000000000000000011298294470273603906108626458844994775750910,
-0.000000000000000016631550164859865080260789105873201144983332,
0.000000000000000014744851779090400745718574480607257337034608,
0.000000000000000012612041708607272323653776640288407936773920,
-0.000000000000000010376189951791935648010122696095284855100862,
0.000000000000000002464554306672328222412628686939445496851651,
0.000000000000000005313728331176426599833210063724977057670412,
-0.000000000000000008447009925163318486354413502439551845092422,
0.000000000000000011147416283518576469042772291050372164711682,
0.000000000000000012135817257434882517637174340365564652327248,
0.000000000000000001239763890623415703486369681864419884312057,
0.000000000000000003339335899151292112079421054940923783069318,
-0.000000000000000001088684311037336985733172771879069024237267,
0.000000000000000000368191313213496567978489883340070950702855,
0.000000000000000000010218678569865827261944131287657359888836,
-0.000000000000000000002294715658200736854084490199076834564828,
0.000000000000000000000023937975982716759939460578199079312735,
0.000000000000000000000000277483435137618374214615526519880590,
-0.000000000000000000000000000010059163032724897523864150812796,
-0.000000000000000000000000000000053478665420311392747882683795,
-0.000000000000000000000000000000000179938932842181894028261801])

FmultGOLDi = np.array([
0.000000000000002887976197838955719210396466678503202274441719,
0.000000000000007356633931665984176353905283300406393529047300,
0.000000000000011808915833649668297369317865706466169612278219,
0.000000000000012287042238421127796382089475501521913099688653,
0.000000000000010264907332062989867384706285449971436957963995,
0.000000000000006162437373668527910172342683448867968410073755,
0.000000000000003280044029569669682046835001251073550343007393,
0.000000000000001114910265607671938433059259273001426719532439,
0.000000000000000100676649739225180905782252716771243709792872,
-0.000000000000000249846953397024053284416465018496112689529512,
-0.000000000000000394519697979661750210540420204405940741575372,
-0.000000000000000162293805228774149766516384376501952952073253,
-0.000000000000000186152287367385243904668495422906031850390405,
-0.000000000000000063543669875591764505447796544116957451274549,
0.000000000000000635874365325838720207751113430313246269841982,
-0.000000000000000803842238904500827686316610596533313045538292,
-0.000002035679593433754806358062725002433523968647932633757591,
-0.000000000000000921007760720115582319788422038797648383479100,
0.000002035679598581682246590798465724070354099239921197295189,
-0.000000000000000826845560823153700651524736830158394896702289,
-0.000000000000000790811270897845977390092654306771319912173644,
0.000000000000002094384492250056033444699255993797707232418389,
-0.000000000000001038475506288672215144102400593878506907763947,
-0.000000000000001695450949066562185690221802657236271263732348,
0.000000000000000151640842101879927611466338444830163489042613,
0.000000000000000325112819590556199607322170405098970955244718,
-0.000000000000000563396456853397035308456465685269695174670424,
-0.000000000000000341303831423750257622743833714020869913904329,
-0.000000000000000266267100592590108420641060057178767477806014,
-0.000000000000000049851640304669864743988816582540566778303328,
-0.000000000000000019705682864113244498396950996778097712074620,
-0.000000000000000022569508290818277286510702289130862651211693,
-0.000000000000000032178476827601110465739586055560271841059054,
-0.000000000000000087028491004972031693728551655780642949640533,
-0.000000000000000022313791057191517774609732061675841298719139,
-0.000000000000000089843200543778449370311633609585643442544881,
0.000000000000000076408194421269549564990474470808617848314892,
-0.000000000000000066965893799833779424213697781706836318523827,
0.000000000000000001948003996312226576912024883135421942902191,
0.000000000000000072228635545416017918144163020467678174755926,
-0.000000000000000005872307224082291454635001178910750440055522,
0.000000000000000056561194128237833253242995907298547379911312,
-0.000000000000000020642744467555555532155638376916594798508073,
-0.000000000000000046478487473859041972108981751736367443942539,
-0.000000000000000055965372322168770081733296825526519673571237,
0.000000000000000032444413902652329254280589778482883801117141,
0.000000000000000056943086249103526934781517712180073524759519,
0.000000000000000057905835463393115444447561299578345609001832,
-0.000000000000000014959444658954826594184301673980749296396408,
-0.000000000000000055324202571882866705334107945322938430048789,
0.000000000000000008413819766299399195004015213409351609494926,
-0.000000000000000032962368591676820219158079994223802016954130,
-0.000000000000000041513971767196371831340384931703346160577366,
0.000000000000000035783747151710202808846398508177017446348719,
0.000000000000000046986080942896403585283753734888465632203317,
0.000000000000000038037759006804806143034293003178006288340623,
-0.000000000000000046541120498778220452526825436551721510388589,
-0.000000000000000027794360941849047077529445402290452978315196,
0.000000000000000042590517149103820888520039264147722172900164,
0.000000000000000030881140872362467042310661183042830471305989,
0.000000000000000032141100077829413594559377893375180447601467,
-0.000000000000000039827871989458022177371813339846886508526136,
0.000000000000000003632536035765609795656238404595901854403858,
-0.000000000000000041037670944857567650294576916841276958373867,
-0.000000000000000009011561778932421699456212425580143335214805,
-0.000000000000000027473950932590545649491325839780117819086717,
0.000000000000000013876337604542800828102002492708985688868454,
0.000000000000000034989450573102809894542129142167795141663607,
0.000000000000000006808182781970003408483241605789259135677582,
-0.000000000000000029204472310190089160702700528781493011753832,
0.000000000000000017715495672166220250693738238723257830931815,
-0.000000000000000031216060513834349103643162378038496838674937,
0.000000000000000000442324899507866779013854586456783977357562,
-0.000000000000000008465904010406529925478975239900412754174553,
0.000000000000000028029569569599332754167543820818673471307833,
-0.000000000000000002121575894075065342849926344633106058499132,
-0.000000000000000014508038900168759950433972651585653015869338,
0.000000000000000024108552701283693809070334701994883289770566,
-0.000000000000000003853114323949772904849782061755875631975207,
-0.000000000000000017655006380280645888668432545148452531994744,
0.000000000000000006301757105273467049485749243847094724300439,
-0.000000000000000008456304097351231787656953210689392798779239,
0.000000000000000012660430155797945742877747169644932937955444,
-0.000000000000000011184635086120576378822897524798660543087232,
0.000000000000000015900801285511076638972756399328002084116785,
-0.000000000000000012648701544415922328031500597447825808979735,
0.000000000000000005261657488057850216914984343269988127445956,
0.000000000000000007709078410932239474687882588387104480902365,
-0.000000000000000000551224880405062965763494433699883177096279,
0.000000000000000005793021678275924945927259846252395691450936,
-0.000000000000000002238914248160735420373195989230240483582428,
0.000000000000000002099694455096808987946725163473834171124437,
-0.000000000000000001759451777368215447745570817699126735361671,
-0.000000000000000000005864696976685166981627440035384933811093,
0.000000000000000000000616781238619074988485039725233517358342,
0.000000000000000000000009772310705438910973266251919302578900,
-0.000000000000000000000000203681822405003392098831909711153881,
0.000000000000000000000000000768811143106476069786678121070322,
-0.000000000000000000000000000000056946543385273856256515527647,
-0.000000000000000000000000000000000125538420541413838694294086])


FmultGOLD = FmultGOLDr + 1j*FmultGOLDi




# =============================================================================
# need a resolution requirement. From the analytical solution?

T = 2.*np.pi # s, period
omg = 2.*np.pi/44700. # rads/s
nu = 1e-6
dS = np.sqrt(2.*nu/omg) # Stokes' 2nd problem BL thickness

Rej = np.array([600.])
ai = np.array([0.1]) 
#Rej = np.linspace(1300.,1400.,num=4,endpoint=True)
#ai = np.linspace(0.025,0.5,num=20,endpoint=True)

# grid
grid_flag = 'uniform' #'hybrid cosine' #'  'cosine' # # 
wall_BC_flag = 'BC'
plot_freq = 0
Nz = 100 # 
H = 32. # = Hd/dS, non-dimensional grid height
CFL = 2. # 
Hd = H*dS # m, dimensional domain height (arbitrary choice)
z,dz = fn.grid_choice( grid_flag , Nz , H ) # non-dimensional grid

# pre-constructed matrices:
grid_params_dzz = {'H':H, 'Hd':Hd,'z':z,'dz':dz,'Nz':Nz, 'wall_BC_flag':wall_BC_flag} 
grid_params_inv = {'H':H, 'Hd':Hd,'z':z,'dz':dz,'Nz':Nz, 'wall_BC_flag':wall_BC_flag} 
eye_matrix = np.eye( Nz , Nz , 0 , dtype=complex ) # identity matrix
dzz_zeta,lBC = fn.diff_matrix( grid_params_dzz , 'dirchlet 2' , 'dirchlet' , diff_order=2 , stencil_size=3 ) 
dzz_psi,lBC2 = fn.diff_matrix( grid_params_inv , 'dirchlet' , 'dirchlet' , diff_order=2 , stencil_size=3 ) 
dzz_zeta = np.multiply(dzz_zeta,np.ones(np.shape(dzz_zeta)),dtype=complex) 
dzz_psi = np.multiply(dzz_psi,np.ones(np.shape(dzz_psi)),dtype=complex)
A0 = np.zeros( [Nz,Nz] , dtype=complex ) # initial propogator matrix 

Nj = np.shape(Rej)[0]; Ni = np.shape(ai)[0]
M = np.zeros([Nj,Ni]); Mr = np.zeros([Nj,Ni]); Mi = np.zeros([Nj,Ni]);

print('\nGrid:',grid_flag)
print('Nz/H:',Nz/H)

for i in range(0,Ni):
    for j in range(0,Nj):

        print('\nReynolds number: %.1f' %(Rej[j]) )
        print('disturbance wavenumber: %.2f' %(ai[i]) )
        print('H: %.1f' %(H), 'Nz: %i' %(Nz), 'CFL: %.2f' %(CFL) )

        Re = Rej[j]
        a = ai[i]
        U = Re * (nu/dS) # Re = U*dS/nu, so ReB=Re/2
        dt = CFL*(z[0]/Re)  # = CFL*(np.amin(dz)/Re) 
        Nt = int(2.*np.pi/dt)
        freq = int(Nt/10)
        print('number of time steps, Nt = ',Nt)

        inv_psi = np.linalg.inv( dzz_psi - (a**2.*eye_matrix) ) 
        inv_psi = np.multiply(inv_psi,np.ones(np.shape(inv_psi)),dtype=complex)

        # parameters for monodromy matrix computation:
        params = {'nu': nu, 'omg': omg, 'T': T, 'Td':T, 'U': U, 'inv_psi':inv_psi, 'plot_freq':plot_freq, 'grid_flag':grid_flag,
          'Nz':Nz, 'Nt':Nt, 'Re':Re,'a':a, 'H':H, 'Hd':Hd, 'dzz_zeta':dzz_zeta, 'CFL':CFL, 'A0':A0, 'damper_scale':damper_scale, 'spur_damper':spur_damper,
          'dS':dS, 'z':z, 'dz':dz, 'eye_matrix':eye_matrix,'freq':freq, 'lBC':lBC, 'lBC2':lBC2, 'phi_path':phi_path, 'psi_path':psi_path} 
        Nc = fn.count_points( params )
        print('number of points within delta = %i' %(Nc))

        # initial conditions (prinicipal fundamental solution matrix):
        Phi0 = np.eye(int(Nz),int(Nz),0,dtype=complex) 

        # compute monodromy matrix:
        Phin,final_time = fn.rk4_time_step( params, Phi0 , T/Nt, T , 'stokes' )

        # store maxima:
        Fmult = np.linalg.eigvals(Phin) 

        print('Should be exactly zero:')
        """
        for n in range(0,Nz):
            print('%.60f' %(np.real(Fmult[n])))
        print('\n')
        for n in range(0,Nz):
            print('%.60f' %(np.imag(Fmult[n])))
        """
        print(sum(np.real(FmultGOLD)-np.real(Fmult)))
        print(sum(np.imag(FmultGOLD)-np.imag(Fmult)))
      
   





